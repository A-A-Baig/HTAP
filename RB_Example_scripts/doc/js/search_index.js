var search_data = {"index":{"searchIndex":["array","children","currencyconverter","els_parser","file","hash","him","integer","meta_mutator","object","precision","radioplayer","representable_in_english","representable_in_spanish","sametimesameplace","shuffleplayer","simplecli","simple_cgi","string","symbol","temperature_converter","tester","units_converter","wall","-()","commify()","convert()","convert()","count_of()","create_english()","create_spanish()","declare_regexes_and_replacements()","describe()","describe()","deviance_from()","display()","empty?()","fact()","false?()","fib()","fitter_than?()","get_child()","get_elements_from_filename()","get_format()","get_lines()","get_output()","just_letters()","make_incrementer()","matching_compound_members()","matching_members()","merge_totals()","modified_join()","modified_join!()","most_common_words()","mutate()","mutate_mutations!()","mutate_until_matches!()","my_join()","need_ones?()","new()","new()","new()","new()","new()","num_matches()","output_rates()","palindrome?()","parse_opts()","perform_replacements_on_contents()","perform_replacements_on_filename!()","play()","power_of()","pretty_report()","propagate()","random_element()","report()","report_progress()","report_success()","reset_params()","return_proc()","rotate()","rotate!()","scramble()","scramble!()","search()","select_fittest()","setup()","show_mems()","shuffle()","shuffle!()","sing_one_verse!()","softwrap()","softwrap_line()","sort_by_tag_count()","sorted_by_tag_count()","special_replacements_in_english()","special_replacements_in_spanish()","strip_tags()","tag_count()","test_langs()","test_length()","test_mass()","test_temps()","to_b()","to_en()","to_english()","to_es()","to_lang()","to_proc()","to_roman()","to_spanish()","true?()","walk()","well_formed?()","well_formed_xml?()","well_formed_xml?()","willow_ask()","word_count()","word_count_for_file()","yield_block()","dos_file","einstein_quotes","cad.yaml","inr.yaml","usd.yaml","eh.html","rcss","rhtml","mod_ruby_demo.conf","mod_ruby_demo.rhtml","stylesheet.rcss","stylesheet2.rcss","entries","repository","root"],"longSearchIndex":["array","children","currencyconverter","els_parser","file","hash","him","integer","meta_mutator","object","precision","radioplayer","representable_in_english","representable_in_spanish","sametimesameplace","shuffleplayer","simplecli","simple_cgi","string","symbol","temperature_converter","tester","units_converter","wall","hash#-()","precision#commify()","temperature_converter#convert()","units_converter#convert()","array#count_of()","representable_in_english#create_english()","representable_in_spanish#create_spanish()","object#declare_regexes_and_replacements()","him::describe()","sametimesameplace::describe()","string#deviance_from()","simple_cgi#display()","wall#empty?()","integer#fact()","object#false?()","integer#fib()","string#fitter_than?()","hash#get_child()","object#get_elements_from_filename()","object#get_format()","object#get_lines()","object#get_output()","string#just_letters()","object#make_incrementer()","array#matching_compound_members()","array#matching_members()","hash#merge_totals()","array#modified_join()","array#modified_join!()","object#most_common_words()","string#mutate()","meta_mutator#mutate_mutations!()","string#mutate_until_matches!()","array#my_join()","integer#need_ones?()","currencyconverter::new()","els_parser::new()","meta_mutator::new()","shuffleplayer::new()","wall::new()","string#num_matches()","currencyconverter#output_rates()","string#palindrome?()","simplecli#parse_opts()","object#perform_replacements_on_contents()","object#perform_replacements_on_filename!()","shuffleplayer#play()","integer#power_of()","hash#pretty_report()","string#propagate()","array#random_element()","meta_mutator#report()","string#report_progress()","string#report_success()","els_parser#reset_params()","object#return_proc()","string#rotate()","string#rotate!()","string#scramble()","string#scramble!()","els_parser#search()","children#select_fittest()","tester#setup()","integer#show_mems()","array#shuffle()","array#shuffle!()","wall#sing_one_verse!()","object#softwrap()","object#softwrap_line()","hash#sort_by_tag_count()","hash#sorted_by_tag_count()","representable_in_english#special_replacements_in_english()","representable_in_spanish#special_replacements_in_spanish()","object#strip_tags()","object#tag_count()","tester#test_langs()","tester#test_length()","tester#test_mass()","tester#test_temps()","object#to_b()","representable_in_english#to_en()","representable_in_english#to_english()","representable_in_spanish#to_es()","integer#to_lang()","symbol#to_proc()","integer#to_roman()","representable_in_spanish#to_spanish()","object#true?()","radioplayer::walk()","object#well_formed?()","file#well_formed_xml?()","string#well_formed_xml?()","sametimesameplace::willow_ask()","object#word_count()","object#word_count_for_file()","sametimesameplace::yield_block()","","","","","","","","","","","","","","",""],"info":[["Array","","Array.html","","<p>array_join.rb\n<p>Extend the built-in <strong>Array</strong> class.\n<p>Extend the built-in <strong>Array</strong> class.\n"],["Children","","Children.html","","<p>Recreate Richard Dawkins&#39; Blind Watchmaker program, in which a  purely\nrandom string is mutated and …\n"],["CurrencyConverter","","CurrencyConverter.html","","<p>currency_converter1.rb Using fixed exchange rates\n"],["ELS_Parser","","ELS_Parser.html","","<p>A text-processing parser that does ASCII-only  Equidistant Letter Sequence\nanalyses similar to that described …\n"],["File","","File.html","",""],["Hash","","Hash.html","","<p>I also want to add a method to all <strong>Hash</strong>es.\n"],["Him","","Him.html","","<p>him.rb\n"],["Integer","","Integer.html","","<p>factorial1.rb\n<p>factorial2.rb\n<p>factorial3.rb\n"],["Meta_Mutator","","Meta_Mutator.html","",""],["Object","","Object.html","","<p>This is intended merely to add handy true? and false? methods to every\nobject. The most succinct way …\n"],["Precision","","Precision.html","",""],["RadioPlayer","","RadioPlayer.html","",""],["Representable_In_English","","Representable_In_English.html","","<p>This is intended for use with to_lang.rb\n"],["Representable_In_Spanish","","Representable_In_Spanish.html","","<p>This is intended for use with to_lang.rb\n"],["SameTimeSamePlace","","SameTimeSamePlace.html","","<p>same_time_same_place.rb\n"],["ShufflePlayer","","ShufflePlayer.html","",""],["SimpleCLI","","SimpleCLI.html","","<p>Parses command line options.\n"],["Simple_CGI","","Simple_CGI.html","",""],["String","","String.html","","<p>I want all Strings to have the private letters_only  method from this file\n<p>Gives every <strong>String</strong> the ability …\n"],["Symbol","","Symbol.html","","<p>This is taken directly from the Ruby Extensions Project at \nextensions.rubyforge.org/rdoc/index.html …\n"],["Temperature_Converter","","Temperature_Converter.html","","<p>Converts to and from various units of temperature.\n"],["Tester","","Tester.html","",""],["Units_Converter","","Units_Converter.html","","<p>Converts to and from various units of measure. Supplement as desired.  More\ninformation is available …\n"],["Wall","","Wall.html","","<p>99 bottles problem in Ruby\n"],["-","Hash","Hash.html#method-i-2D","(hash_with_pairs_to_remove_from_self)","<p>Allow <strong>Hash</strong>es to be subtracted from each other.\n"],["commify","Precision","Precision.html#method-i-commify","(args = {})","<p>This method returns a <strong>String</strong> representing the numeric\nvalue of self, with delimiters at every digit breakpoint. …\n"],["convert","Temperature_Converter","Temperature_Converter.html#method-i-convert","(params)",""],["convert","Units_Converter","Units_Converter.html#method-i-convert","(params)",""],["count_of","Array","Array.html#method-i-count_of","(item)",""],["create_english","Representable_In_English","Representable_In_English.html#method-i-create_english","()","<p>Return a <strong>Hash</strong> whose keys are <strong>Integer</strong>s and\nwhose values  are the word representing the same value written …\n"],["create_spanish","Representable_In_Spanish","Representable_In_Spanish.html#method-i-create_spanish","()","<p>Return a <strong>Hash</strong> whose keys are <strong>Integer</strong>s and\nwhose values  are the word representing the same value written …\n"],["declare_regexes_and_replacements","Object","Object.html#method-i-declare_regexes_and_replacements","()",""],["describe","Him","Him.html#method-c-describe","()",""],["describe","SameTimeSamePlace","SameTimeSamePlace.html#method-c-describe","()",""],["deviance_from","String","String.html#method-i-deviance_from","(target)",""],["display","Simple_CGI","Simple_CGI.html#method-i-display","()",""],["empty?","Wall","Wall.html#method-i-empty-3F","()","<p>Predicate, ends in a question mark, returns <strong>Boolean</strong>.\n"],["fact","Integer","Integer.html#method-i-fact","()",""],["false?","Object","Object.html#method-i-false-3F","()",""],["fib","Integer","Integer.html#method-i-fib","()",""],["fitter_than?","String","String.html#method-i-fitter_than-3F","(other, target)",""],["get_child","Hash","Hash.html#method-i-get_child","()",""],["get_elements_from_filename","Object","Object.html#method-i-get_elements_from_filename","(filename)","<p>Returns DOM elements of a given filename.\n"],["get_format","Object","Object.html#method-i-get_format","(lines)",""],["get_lines","Object","Object.html#method-i-get_lines","(filename)","<p>line_num.rb\n"],["get_output","Object","Object.html#method-i-get_output","(lines)",""],["just_letters","String","String.html#method-i-just_letters","(case_matters)","<p>This provides a public method to access the private letters_only  method we\nrequired from palindrome2.rb. …\n"],["make_incrementer","Object","Object.html#method-i-make_incrementer","(delta)","<p>make_incrementer.rb\n"],["matching_compound_members","Array","Array.html#method-i-matching_compound_members","(procs_array)","<p>Takes an <strong>Array</strong> of <strong>Proc</strong>s as an argument, \nand returns all members matching the criteria defined  by each …\n"],["matching_members","Array","Array.html#method-i-matching_members","(&some_block)","<p>Takes a block as an argument, and returns a list of  members matching the\ncriteria defined by that block. …\n"],["merge_totals","Hash","Hash.html#method-i-merge_totals","(other_hash)","<p>Merge with another <strong>Hash</strong>, but add values rather than simply\noverwriting duplicate keys.\n"],["modified_join","Array","Array.html#method-i-modified_join","(separator1, separator2)",""],["modified_join!","Array","Array.html#method-i-modified_join-21","(separator1, separator2)",""],["most_common_words","Object","Object.html#method-i-most_common_words","(input, limit=25)",""],["mutate","String","String.html#method-i-mutate","(params)",""],["mutate_mutations!","Meta_Mutator","Meta_Mutator.html#method-i-mutate_mutations-21","( params, did_no_better_count=0 )",""],["mutate_until_matches!","String","String.html#method-i-mutate_until_matches-21","(target=TARGET, params=PARAMS)",""],["my_join","Array","Array.html#method-i-my_join","(separator1=', ', separator2=' and ')",""],["need_ones?","Integer","Integer.html#method-i-need_ones-3F","(lang)",""],["new","CurrencyConverter","CurrencyConverter.html#method-c-new","()",""],["new","ELS_Parser","ELS_Parser.html#method-c-new","(filename, search_params=nil)",""],["new","Meta_Mutator","Meta_Mutator.html#method-c-new","()",""],["new","ShufflePlayer","ShufflePlayer.html#method-c-new","(files)",""],["new","Wall","Wall.html#method-c-new","(num_of_bottles)",""],["num_matches","String","String.html#method-i-num_matches","(thing_to_match)",""],["output_rates","CurrencyConverter","CurrencyConverter.html#method-i-output_rates","(mult=1)",""],["palindrome?","String","String.html#method-i-palindrome-3F","()",""],["parse_opts","SimpleCLI","SimpleCLI.html#method-i-parse_opts","(args)","<p>METHODS\n"],["perform_replacements_on_contents","Object","Object.html#method-i-perform_replacements_on_contents","(contents)","<p>This lacks a ! suffix, because it duplicates the argument, and  returns the\nchanges made to that duplicate, …\n"],["perform_replacements_on_filename!","Object","Object.html#method-i-perform_replacements_on_filename-21","(filename)","<p>This has the ! suffix, because it destructively writes into the filename\nargument provided.\n"],["play","ShufflePlayer","ShufflePlayer.html#method-i-play","()","<p>Plays a shuffled version of self\n"],["power_of","Integer","Integer.html#method-i-power_of","(base)","<p>Add a simple <strong>Integer</strong>-only method that reports the \nexponent to which the base must be raised to get self. …\n"],["pretty_report","Hash","Hash.html#method-i-pretty_report","()","<p>Your basic pretty formatter, returns a <strong>String</strong>.\n"],["propagate","String","String.html#method-i-propagate","(params)",""],["random_element","Array","Array.html#method-i-random_element","()","<p>While we&#39;re here, we might as well offer a method  for pulling out a\nrandom member of the <strong>Array</strong>. …\n"],["report","Meta_Mutator","Meta_Mutator.html#method-i-report","()",""],["report_progress","String","String.html#method-i-report_progress","(params)",""],["report_success","String","String.html#method-i-report_success","()",""],["reset_params","ELS_Parser","ELS_Parser.html#method-i-reset_params","(search_params)",""],["return_proc","Object","Object.html#method-i-return_proc","(criterion, further_criterion=1)","<p>return_proc.rb\n"],["rotate","String","String.html#method-i-rotate","(char)",""],["rotate!","String","String.html#method-i-rotate-21","(char)",""],["scramble","String","String.html#method-i-scramble","(target=TARGET)",""],["scramble!","String","String.html#method-i-scramble-21","(target=TARGET)","<p>Replace self with a <strong>String</strong> the same length as the \n<em>target</em> argument, consisting entirely of lowercase …\n"],["search","ELS_Parser","ELS_Parser.html#method-i-search","(term=@search_params[:term])","<p>Performs an ELS analysis on the <em>filename</em> argument, searching for \nthe term argument, falling back to …\n"],["select_fittest","Children","Children.html#method-i-select_fittest","(target)",""],["setup","Tester","Tester.html#method-i-setup","()",""],["show_mems","Integer","Integer.html#method-i-show_mems","()",""],["shuffle","Array","Array.html#method-i-shuffle","()","<p>Non-destructive; returns a copy of self, re-ordered randomly.\n"],["shuffle!","Array","Array.html#method-i-shuffle-21","()","<p>Destructive; re-orders self randomly.\n"],["sing_one_verse!","Wall","Wall.html#method-i-sing_one_verse-21","()",""],["softwrap","Object","Object.html#method-i-softwrap","(filename)","<p>“Softwrap” a filename argument, preserving “nn” between paragraphs but\ncompressing …\n"],["softwrap_line","Object","Object.html#method-i-softwrap_line","(line)","<p>Return “nn” if the <strong>String</strong> argument has no length after\nbeing chomped (signifying that it …\n"],["sort_by_tag_count","Hash","Hash.html#method-i-sort_by_tag_count","()","<p>Given that <strong>self</strong> is a <strong>Hash</strong> with keys of\nXML tags and values of their respective counts in an  XML source …\n"],["sorted_by_tag_count","Hash","Hash.html#method-i-sorted_by_tag_count","()",""],["special_replacements_in_english","Representable_In_English","Representable_In_English.html#method-i-special_replacements_in_english","(num_as_string)",""],["special_replacements_in_spanish","Representable_In_Spanish","Representable_In_Spanish.html#method-i-special_replacements_in_spanish","(num_as_string)",""],["strip_tags","Object","Object.html#method-i-strip_tags","(elements)","<p>Returns a <strong>String</strong> consisting of the text of a given XML\ndocument  with the tags stripped.\n"],["tag_count","Object","Object.html#method-i-tag_count","(elements)","<p>Returns a <strong>Hash</strong> with keys of XML tags and values  of those\ntags&#39; counts within a given XML document. …\n"],["test_langs","Tester","Tester.html#method-i-test_langs","()",""],["test_length","Tester","Tester.html#method-i-test_length","()",""],["test_mass","Tester","Tester.html#method-i-test_mass","()",""],["test_temps","Tester","Tester.html#method-i-test_temps","()",""],["to_b","Object","Object.html#method-i-to_b","()",""],["to_en","Representable_In_English","Representable_In_English.html#method-i-to_en","()",""],["to_english","Representable_In_English","Representable_In_English.html#method-i-to_english","()","<p>syntactic sugar\n"],["to_es","Representable_In_Spanish","Representable_In_Spanish.html#method-i-to_es","()",""],["to_lang","Integer","Integer.html#method-i-to_lang","(lang)",""],["to_proc","Symbol","Symbol.html#method-i-to_proc","()",""],["to_roman","Integer","Integer.html#method-i-to_roman","()",""],["to_spanish","Representable_In_Spanish","Representable_In_Spanish.html#method-i-to_spanish","()","<p>syntactic sugar\n"],["true?","Object","Object.html#method-i-true-3F","()",""],["walk","RadioPlayer","RadioPlayer.html#method-c-walk","(dir, callback_proc, dir_filter=nil)",""],["well_formed?","Object","Object.html#method-i-well_formed-3F","(filename)",""],["well_formed_xml?","File","File.html#method-i-well_formed_xml-3F","()",""],["well_formed_xml?","String","String.html#method-i-well_formed_xml-3F","()",""],["willow_ask","SameTimeSamePlace","SameTimeSamePlace.html#method-c-willow_ask","(args = ['what', 'what'])","<p>Wrapping a lambda call within a function can provide  default values for\narguments\n"],["word_count","Object","Object.html#method-i-word_count","(files)",""],["word_count_for_file","Object","Object.html#method-i-word_count_for_file","(filename)",""],["yield_block","SameTimeSamePlace","SameTimeSamePlace.html#method-c-yield_block","(*args, &block)","<p>Passing a block as an argument to a method\n"],["DOS_file","","extras/DOS_file_txt.html","","<p>I am a DOS file.\rI am a DOS file.\n"],["Einstein_quotes","","extras/Einstein_quotes_txt.html","","<p>Before God we are all equally wise - and equally foolish. -Albert Einstein\nI never think of the future …\n"],["CAD.yaml","","extras/currency_exchange_rates/CAD_yaml.html","","<p>EUR: 0.697733 INR: 40.571763 CNY: 7.003059 MXN: 9.792959 USD: 0.887585\n"],["INR.yaml","","extras/currency_exchange_rates/INR_yaml.html","","<p>EUR: 0.017197 CNY: 0.172609 MXN: 0.241374 CAD: 0.024648 USD: 0.021877\n"],["USD.yaml","","extras/currency_exchange_rates/USD_yaml.html","","<p>EUR: 0.786103 INR: 45.710299 CNY: 7.890017 MXN: 11.033266 CAD: 1.126653\n"],["eh.html","","extras/eh_html.html","","<p>&lt;!DOCTYPE html PUBLIC “-//W3C//DTD XHTML 1.0 Strict//EN”\n“www.w3.org/TR/xhtml1/DTD/xhtml1-strict.dtd …\n"],["rcss","","extras/httpd_conf/rcss_txt.html","","<p># handle *.rcss as eruby files. &lt;Files *.rcss&gt;\n\n<pre>AddType text/css .rcss\nAddType application/x-httpd-ruby ...</pre>\n"],["rhtml","","extras/httpd_conf/rhtml_txt.html","","<p># handle *.rhtml as eruby files. &lt;Files *.rhtml&gt;\n\n<pre>AddType text/html .rhtml\nAddType application/x-httpd-ruby ...</pre>\n"],["mod_ruby_demo.conf","","mod_ruby_demo_conf.html","","<p>&lt;IfModule mod_ruby.c&gt;\n\n<pre># for Apache::RubyRun\nRubyRequire apache/ruby-run\n\n# for Apache::ERubyRun ...</pre>\n"],["mod_ruby_demo.rhtml","","mod_ruby_demo_rhtml.html","","<p>&lt;!DOCTYPE html\n\n<pre> PUBLIC &quot;-//W3C//DTD XHTML 1.0 Strict//EN&quot;\n&quot;http://www.w3.org/TR/xhtml1/DTD/xhtml1-strict.dtd&quot;&gt;</pre>\n"],["stylesheet.rcss","","stylesheet_rcss.html","","<p>This file outputs CSS data customized by user_agent via eruby. There is a\nblog entry about some similar …\n"],["stylesheet2.rcss","","stylesheet2_rcss.html","","<p>This file outputs CSS data customized by user_agent using eruby.\n<p>&lt;% # define functions def width(type, …\n"],["Entries","","tests/CVS/Entries.html","","<p>/test_opts.rb/1.6/Fri Feb 23 21:26:40 2007// /test_cc2.rb/1.1/Wed Jan 17\n14:22:41 2007// /test_commify.rb/1.1/Wed …\n"],["Repository","","tests/CVS/Repository.html","","<p>Wicked_Cool_Ruby_Scripts/scripts/tests\n"],["Root","","tests/CVS/Root.html","","<p>:ext: kbaird@nibbler.med.buffalo.edu:/var/lib/cvs\n"]]}}